{
    "genesis_time": "2024-02-08T00:17:23.342520258Z",
    "chain_id": "xian-testnet-1",
    "initial_height": "94",
    "consensus_params": {
        "block": {
            "max_bytes": "22020096",
            "max_gas": "-1",
            "time_iota_ms": "1000"
        },
        "evidence": {
            "max_age_num_blocks": "100000",
            "max_age_duration": "172800000000000",
            "max_bytes": "1048576"
        },
        "validator": {
            "pub_key_types": [
                "ed25519"
            ]
        },
        "version": {}
    },
    "validators": [
        {
            "address": "614EBE42CBE8354F733851F4316D0DE316B1AEF0",
            "pub_key": {
                "type": "tendermint/PubKeyEd25519",
                "value": "f6SWyiQ45IfMRaiif9lbLv43MiP3tyho+6sgXWhr5I4="
            },
            "power": "10",
            "name": ""
        },
        {
            "address": "5C7B6531A88A6C6941A7AA495AF041394F8345F0",
            "pub_key": {
                "type": "tendermint/PubKeyEd25519",
                "value": "3/XVTZw82wTSecPAoSPWpzqU4HJdfqyVX9+HKY2+RaY="
            },
            "power": "10",
            "name": ""
        },
        {
            "address": "7D608D056AE761CE4DAE0EE173DFC67E77BC5A1E",
            "pub_key": {
                "type": "tendermint/PubKeyEd25519",
                "value": "bSR2zWb6J3tgd8ds3NknMwQNraLhKijD67CK9E4SvnY="
            },
            "power": "10",
            "name": ""
        },
        {
            "address": "06D833910C79C812F2EF9E062B9B6C606F4FB6A7",
            "pub_key": {
                "type": "tendermint/PubKeyEd25519",
                "value": "tNGWfmJku81h/Uh8rzyvr/3DS+MdCZS/Aq/cwgVsBTw="
            },
            "power": "10",
            "name": ""
        },
        {
            "address": "11229B390E075EE873A279CE85A978E3DE4938AA",
            "pub_key": {
                "type": "tendermint/PubKeyEd25519",
                "value": "2yGnMTdnLwdfmo7hQqGqSDml3rKO8DoQ8+fhbIfbjyQ="
            },
            "power": "10",
            "name": ""
        }
    ],
    "app_hash": "",
    "abci_genesis": {
        "hash": "34633133323664303538343437623063353236643438363938653962306635313030633666346430373835623365633634393165396562326330376237353830",
        "number": 94,
        "origin": {
            "signature": "5ebeb4464480c4f96b54f1b9e3728ffac6a5420196aff18492468066f049e5188b5a8cc6fe5414857dd61966905188a124f5d2741a33e12aaaa9e1f4b7f86106",
            "sender": "da20816d1d5ff3ae65543c63dad14c1204d2260cfb8e4fe00a1a2b8e2edddcd9"
        },
        "genesis": [
            {
                "key": "con_borat.__code__",
                "value": "def ____():\n    pass\n\n\n@__export('con_borat')\ndef borat():\n    return 'https://www.youtube.com/watch?v=r13riaRKGo0'\n"
            },
            {
                "key": "con_borat.__developer__",
                "value": "80e1ac9fe93b88fc201bc3029a920bc27c752afd6ff0d71a0125ac485ab090f8"
            },
            {
                "key": "con_borat.__owner__",
                "value": null
            },
            {
                "key": "con_borat.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        4,
                        30,
                        16,
                        11,
                        17,
                        0
                    ]
                }
            },
            {
                "key": "con_hello.__code__",
                "value": "def ____():\n    pass\n\n\n@__export('con_hello')\ndef test():\n    return 'Hello, World!'\n"
            },
            {
                "key": "con_hello.__developer__",
                "value": "80e1ac9fe93b88fc201bc3029a920bc27c752afd6ff0d71a0125ac485ab090f8"
            },
            {
                "key": "con_hello.__owner__",
                "value": null
            },
            {
                "key": "con_hello.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        5,
                        8,
                        0,
                        15,
                        23,
                        0
                    ]
                }
            },
            {
                "key": "con_multisend.__code__",
                "value": "I = importlib\n\n\n@__export('con_multisend')\ndef send(addresses: list, amount: float, contract: str):\n    token = I.import_module(contract)\n    for address in addresses:\n        token.transfer_from(amount=amount, to=address, main_account=ctx.signer)\n"
            },
            {
                "key": "con_multisend.__developer__",
                "value": "7fa496ca2438e487cc45a8a27fd95b2efe373223f7b72868fbab205d686be48e"
            },
            {
                "key": "con_multisend.__owner__",
                "value": null
            },
            {
                "key": "con_multisend.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        4,
                        20,
                        18,
                        34,
                        20,
                        0
                    ]
                }
            },
            {
                "key": "con_multisend123.__code__",
                "value": "I = importlib\n\n\n@__export('con_multisend123')\ndef send(addresses: list, amount: float, contract: str):\n    token = I.import_module(contract)\n    for address in addresses:\n        token.transfer_from(amount=amount, to=address, main_account=ctx.signer)\n"
            },
            {
                "key": "con_multisend123.__developer__",
                "value": "b6504cf056e264a4c1932d5de6893d110db5459ab4f742eb415d98ed989bb98d"
            },
            {
                "key": "con_multisend123.__owner__",
                "value": null
            },
            {
                "key": "con_multisend123.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        4,
                        26,
                        23,
                        30,
                        34,
                        0
                    ]
                }
            },
            {
                "key": "con_pf3.__code__",
                "value": "def ____():\n    pass\n\n\n@__export('con_pf3')\ndef pf3():\n    return 'pF3 was here!!'\n"
            },
            {
                "key": "con_pf3.__developer__",
                "value": "80e1ac9fe93b88fc201bc3029a920bc27c752afd6ff0d71a0125ac485ab090f8"
            },
            {
                "key": "con_pf3.__owner__",
                "value": null
            },
            {
                "key": "con_pf3.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        4,
                        30,
                        16,
                        9,
                        51,
                        0
                    ]
                }
            },
            {
                "key": "con_rat.__code__",
                "value": "__balances = Hash(default_value=0, contract='con_rat', name='balances')\n__metadata = Hash(contract='con_rat', name='metadata')\n\n\ndef ____():\n    __balances[ctx.caller] = 1000000\n    __metadata['token_name'] = 'RAT'\n    __metadata['token_symbol'] = 'RAT'\n    __metadata['token_logo_url'] = 'https://some.token.url/test-token.png'\n    __metadata['token_website'] = 'https://some.token.url'\n    __metadata['operator'] = ctx.caller\n\n\n@__export('con_rat')\ndef change_metadata(key: str, value: Any):\n    assert ctx.caller == __metadata['operator'\n        ], 'Only operator can set metadata!'\n    __metadata[key] = value\n\n\n@__export('con_rat')\ndef transfer(amount: float, to: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __balances[ctx.caller] >= amount, 'Not enough coins to send!'\n    __balances[ctx.caller] -= amount\n    __balances[to] += amount\n    return f'Sent {amount} to {to}'\n\n\n@__export('con_rat')\ndef approve(amount: float, to: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    __balances[ctx.caller, to] += amount\n    return f'Approved {amount} for {to}'\n\n\n@__export('con_rat')\ndef transfer_from(amount: float, to: str, main_account: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __balances[main_account, ctx.caller\n        ] >= amount, 'Not enough coins approved to send! You have {} and are trying to spend {}'.format(\n        __balances[main_account, ctx.caller], amount)\n    assert __balances[main_account] >= amount, 'Not enough coins to send!'\n    __balances[main_account, ctx.caller] -= amount\n    __balances[main_account] -= amount\n    __balances[to] += amount\n    return f'Sent {amount} to {to} from {main_account}'\n"
            },
            {
                "key": "con_rat.__developer__",
                "value": "ca4a88412dbfd6c32a39ade24b4be71c78d6c1388ce536a13c73f4aa6c8570cf"
            },
            {
                "key": "con_rat.__owner__",
                "value": null
            },
            {
                "key": "con_rat.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        5,
                        8,
                        16,
                        41,
                        25,
                        0
                    ]
                }
            },
            {
                "key": "con_rat.balances",
                "value": null
            },
            {
                "key": "con_rat.metadata",
                "value": null
            },
            {
                "key": "con_test10.__code__",
                "value": "__currency_balances = ForeignHash(foreign_contract='currency', foreign_name\n    ='balances', contract='con_test10', name='currency_balances')\n\n\ndef ____():\n    pass\n\n\n@__export('con_test10')\ndef test():\n    return __currency_balances.as_dict(max_depth=1)\n"
            },
            {
                "key": "con_test10.__developer__",
                "value": "f7f6f03cc5be4ed3c43d440ea54019a0c0d1b9c1d81e2ebc45952b3f5338b845"
            },
            {
                "key": "con_test10.__owner__",
                "value": null
            },
            {
                "key": "con_test10.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        4,
                        22,
                        16,
                        14,
                        52,
                        0
                    ]
                }
            },
            {
                "key": "con_test11.__code__",
                "value": "__currency_balances = ForeignHash(foreign_contract='currency', foreign_name\n    ='balances', contract='con_test11', name='currency_balances')\n\n\ndef ____():\n    pass\n\n\n@__export('con_test11')\ndef test():\n    return __currency_balances.all()\n"
            },
            {
                "key": "con_test11.__developer__",
                "value": "f7f6f03cc5be4ed3c43d440ea54019a0c0d1b9c1d81e2ebc45952b3f5338b845"
            },
            {
                "key": "con_test11.__owner__",
                "value": null
            },
            {
                "key": "con_test11.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        4,
                        22,
                        16,
                        16,
                        41,
                        0
                    ]
                }
            },
            {
                "key": "con_test12.__code__",
                "value": "__test_hash = Hash(contract='con_test12', name='test_hash')\n\n\ndef ____():\n    __test_hash['f'] = 'f'\n    __test_hash['g'] = 'g'\n    __test_hash['h'] = 'h'\n    __test_hash['i'] = 'i'\n    __test_hash['j'] = 'j'\n    __test_hash['k'] = 'k'\n    __test_hash['l'] = 'l'\n    __test_hash['m'] = 'm'\n    __test_hash['n'] = 'n'\n    __test_hash['o'] = 'o'\n    __test_hash['p'] = 'p'\n    __test_hash['q'] = 'q'\n    __test_hash['r'] = 'r'\n    __test_hash['s'] = 's'\n    __test_hash['t'] = 't'\n    __test_hash['u'] = 'u'\n    __test_hash['v'] = 'v'\n    __test_hash['w'] = 'w'\n    __test_hash['x'] = 'x'\n    __test_hash['y'] = 'y'\n    __test_hash['z'] = 'z'\n\n\n@__export('con_test12')\ndef test():\n    return __test_hash.clear()\n"
            },
            {
                "key": "con_test12.__developer__",
                "value": "f7f6f03cc5be4ed3c43d440ea54019a0c0d1b9c1d81e2ebc45952b3f5338b845"
            },
            {
                "key": "con_test12.__owner__",
                "value": null
            },
            {
                "key": "con_test12.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        4,
                        22,
                        16,
                        18,
                        21,
                        0
                    ]
                }
            },
            {
                "key": "con_test12.test_hash",
                "value": null
            },
            {
                "key": "con_test123.__code__",
                "value": "def ____():\n    pass\n\n\n@__export('con_test123')\ndef test():\n    return 'Hello, World!'\n"
            },
            {
                "key": "con_test123.__developer__",
                "value": "b6d01fbbd741b9324a5808bd567e1656ded90969ce5095ad5019005a36932020"
            },
            {
                "key": "con_test123.__owner__",
                "value": null
            },
            {
                "key": "con_test123.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        5,
                        8,
                        7,
                        20,
                        2,
                        0
                    ]
                }
            },
            {
                "key": "con_test13.__code__",
                "value": "__currency_balances = ForeignHash(foreign_contract='currency', foreign_name\n    ='balances', contract='con_test13', name='currency_balances')\n\n\ndef ____():\n    pass\n\n\n@__export('con_test13')\ndef test():\n    return __currency_balances.keys()\n"
            },
            {
                "key": "con_test13.__developer__",
                "value": "f7f6f03cc5be4ed3c43d440ea54019a0c0d1b9c1d81e2ebc45952b3f5338b845"
            },
            {
                "key": "con_test13.__owner__",
                "value": null
            },
            {
                "key": "con_test13.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        4,
                        22,
                        16,
                        21,
                        50,
                        0
                    ]
                }
            },
            {
                "key": "con_test14.__code__",
                "value": "__balances = Hash(default_value=0, contract='con_test14', name='balances')\n__metadata = Hash(contract='con_test14', name='metadata')\n\n\ndef ____():\n    __balances[ctx.caller] = 1000000\n    __metadata['token_name'] = 'TEST TOKEN'\n    __metadata['token_symbol'] = 'TST'\n    __metadata['token_logo_url'] = 'https://some.token.url/test-token.png'\n    __metadata['token_website'] = 'https://some.token.url'\n    __metadata['operator'] = ctx.caller\n\n\n@__export('con_test14')\ndef change_metadata(key: str, value: Any):\n    assert ctx.caller == __metadata['operator'\n        ], 'Only operator can set metadata!'\n    __metadata[key] = value\n\n\n@__export('con_test14')\ndef transfer(amount: float, to: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __balances[ctx.caller] >= amount, 'Not enough coins to send!'\n    __balances[ctx.caller] -= amount\n    __balances[to] += amount\n    return f'Sent {amount} to {to}'\n\n\n@__export('con_test14')\ndef approve(amount: float, to: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    __balances[ctx.caller, to] += amount\n    return f'Approved {amount} for {to}'\n\n\n@__export('con_test14')\ndef transfer_from(amount: float, to: str, main_account: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __balances[main_account, ctx.caller\n        ] >= amount, 'Not enough coins approved to send! You have {} and are trying to spend {}'.format(\n        __balances[main_account, ctx.caller], amount)\n    assert __balances[main_account] >= amount, 'Not enough coins to send!'\n    __balances[main_account, ctx.caller] -= amount\n    __balances[main_account] -= amount\n    __balances[to] += amount\n    return f'Sent {amount} to {to} from {main_account}'\n"
            },
            {
                "key": "con_test14.__developer__",
                "value": "7fa496ca2438e487cc45a8a27fd95b2efe373223f7b72868fbab205d686be48e"
            },
            {
                "key": "con_test14.__owner__",
                "value": null
            },
            {
                "key": "con_test14.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        4,
                        30,
                        16,
                        48,
                        8,
                        0
                    ]
                }
            },
            {
                "key": "con_test14.balances",
                "value": null
            },
            {
                "key": "con_test14.metadata",
                "value": null
            },
            {
                "key": "con_test3.__code__",
                "value": "def ____():\n    pass\n\n\n@__export('con_test3')\ndef test():\n    return a\n"
            },
            {
                "key": "con_test3.__developer__",
                "value": "f7f6f03cc5be4ed3c43d440ea54019a0c0d1b9c1d81e2ebc45952b3f5338b845"
            },
            {
                "key": "con_test3.__owner__",
                "value": null
            },
            {
                "key": "con_test3.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        4,
                        21,
                        17,
                        6,
                        1,
                        0
                    ]
                }
            },
            {
                "key": "con_test5.__code__",
                "value": "def ____():\n    pass\n\n\n@__export('con_test5')\ndef test():\n    return 'test' - 8\n"
            },
            {
                "key": "con_test5.__developer__",
                "value": "f7f6f03cc5be4ed3c43d440ea54019a0c0d1b9c1d81e2ebc45952b3f5338b845"
            },
            {
                "key": "con_test5.__owner__",
                "value": null
            },
            {
                "key": "con_test5.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        4,
                        21,
                        17,
                        46,
                        0,
                        0
                    ]
                }
            },
            {
                "key": "con_test531.__code__",
                "value": "__balances = Hash(default_value=0, contract='con_test531', name='balances')\n__metadata = Hash(contract='con_test531', name='metadata')\n\n\ndef ____():\n    __balances[ctx.caller] = 1000000\n    __metadata['token_name'] = 'TEST TOKEN'\n    __metadata['token_symbol'] = 'TST'\n    __metadata['token_logo_url'] = 'https://some.token.url/test-token.png'\n    __metadata['token_website'] = 'https://some.token.url'\n    __metadata['operator'] = ctx.caller\n\n\n@__export('con_test531')\ndef change_metadata(key: str, value: Any):\n    assert ctx.caller == __metadata['operator'\n        ], 'Only operator can set metadata!'\n    __metadata[key] = value\n\n\n@__export('con_test531')\ndef transfer(amount: float, to: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __balances[ctx.caller] >= amount, 'Not enough coins to send!'\n    __balances[ctx.caller] -= amount\n    __balances[to] += amount\n    return f'Sent {amount} to {to}'\n\n\n@__export('con_test531')\ndef approve(amount: float, to: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    __balances[ctx.caller, to] += amount\n    return f'Approved {amount} for {to}'\n\n\n@__export('con_test531')\ndef transfer_from(amount: float, to: str, main_account: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __balances[main_account, ctx.caller\n        ] >= amount, 'Not enough coins approved to send! You have {} and are trying to spend {}'.format(\n        __balances[main_account, ctx.caller], amount)\n    assert __balances[main_account] >= amount, 'Not enough coins to send!'\n    __balances[main_account, ctx.caller] -= amount\n    __balances[main_account] -= amount\n    __balances[to] += amount\n    return f'Sent {amount} to {to} from {main_account}'\n"
            },
            {
                "key": "con_test531.__developer__",
                "value": "7fa496ca2438e487cc45a8a27fd95b2efe373223f7b72868fbab205d686be48e"
            },
            {
                "key": "con_test531.__owner__",
                "value": null
            },
            {
                "key": "con_test531.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        5,
                        8,
                        7,
                        20,
                        11,
                        0
                    ]
                }
            },
            {
                "key": "con_test531.balances",
                "value": null
            },
            {
                "key": "con_test531.metadata",
                "value": null
            },
            {
                "key": "con_test7.__code__",
                "value": "def ____():\n    pass\n\n\n@__export('con_test7')\ndef test():\n    return 'Hello, World!' - 8\n"
            },
            {
                "key": "con_test7.__developer__",
                "value": "f7f6f03cc5be4ed3c43d440ea54019a0c0d1b9c1d81e2ebc45952b3f5338b845"
            },
            {
                "key": "con_test7.__owner__",
                "value": null
            },
            {
                "key": "con_test7.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        4,
                        21,
                        17,
                        55,
                        27,
                        0
                    ]
                }
            },
            {
                "key": "con_test8.__code__",
                "value": "def ____():\n    pass\n\n\n@__export('con_test8')\ndef test():\n    return AUXILIARY_SALT\n"
            },
            {
                "key": "con_test8.__developer__",
                "value": "f7f6f03cc5be4ed3c43d440ea54019a0c0d1b9c1d81e2ebc45952b3f5338b845"
            },
            {
                "key": "con_test8.__owner__",
                "value": null
            },
            {
                "key": "con_test8.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        4,
                        21,
                        18,
                        44,
                        19,
                        0
                    ]
                }
            },
            {
                "key": "con_test9.__code__",
                "value": "__currency_balances = ForeignHash(foreign_contract='currency', foreign_name\n    ='balances', contract='con_test9', name='currency_balances')\n\n\ndef ____():\n    pass\n\n\n@__export('con_test9')\ndef test():\n    return __currency_balances.as_dict()\n"
            },
            {
                "key": "con_test9.__developer__",
                "value": "f7f6f03cc5be4ed3c43d440ea54019a0c0d1b9c1d81e2ebc45952b3f5338b845"
            },
            {
                "key": "con_test9.__owner__",
                "value": null
            },
            {
                "key": "con_test9.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        4,
                        22,
                        11,
                        54,
                        25,
                        0
                    ]
                }
            },
            {
                "key": "con_testing.__code__",
                "value": "@__export('con_testing')\ndef test():\n    return 'testing'\n"
            },
            {
                "key": "con_testing.__developer__",
                "value": "ee06a34cf08bf72ce592d26d36b90c79daba2829ba9634992d034318160d49f9"
            },
            {
                "key": "con_testing.__owner__",
                "value": null
            },
            {
                "key": "con_testing.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        5,
                        8,
                        22,
                        7,
                        23,
                        0
                    ]
                }
            },
            {
                "key": "con_testing123.__code__",
                "value": "__test = Variable(contract='con_testing123', name='test')\n\n\ndef ____(test_var: str):\n    __test.set(test_var)\n\n\n@__export('con_testing123')\ndef test():\n    return __test.get()\n"
            },
            {
                "key": "con_testing123.__developer__",
                "value": "ee06a34cf08bf72ce592d26d36b90c79daba2829ba9634992d034318160d49f9"
            },
            {
                "key": "con_testing123.__owner__",
                "value": null
            },
            {
                "key": "con_testing123.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        5,
                        8,
                        22,
                        10,
                        20,
                        0
                    ]
                }
            },
            {
                "key": "con_testing123.test",
                "value": "123"
            },
            {
                "key": "con_testing_submission_1.__code__",
                "value": "__balances = Hash(default_value=0, contract='con_testing_submission_1',\n    name='balances')\n__metadata = Hash(contract='con_testing_submission_1', name='metadata')\n\n\ndef ____():\n    __balances[ctx.caller] = 1000000\n    __metadata['token_name'] = 'Rocketswap Test Token'\n    __metadata['token_symbol'] = 'RSWP'\n    __metadata['operator'] = ctx.caller\n\n\n@__export('con_testing_submission_1')\ndef change_metadata(key: str, value: Any):\n    assert ctx.caller == __metadata['operator'\n        ], 'Only operator can set metadata!'\n    __metadata[key] = value\n\n\n@__export('con_testing_submission_1')\ndef transfer(amount: float, to: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __balances[ctx.caller] >= amount, 'Not enough coins to send!'\n    __balances[ctx.caller] -= amount\n    __balances[to] += amount\n\n\n@__export('con_testing_submission_1')\ndef approve(amount: float, to: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    __balances[ctx.caller, to] += amount\n\n\n@__export('con_testing_submission_1')\ndef transfer_from(amount: float, to: str, main_account: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __balances[main_account, ctx.caller\n        ] >= amount, 'Not enough coins approved to send! You have {} and are trying to spend {}'.format(\n        __balances[main_account, ctx.caller], amount)\n    assert __balances[main_account] >= amount, 'Not enough coins to send!'\n    __balances[main_account, ctx.caller] -= amount\n    __balances[main_account] -= amount\n    __balances[to] += amount\n"
            },
            {
                "key": "con_testing_submission_1.__developer__",
                "value": "e9e8aad29ce8e94fd77d9c55582e5e0c57cf81c552ba61c0d4e34b0dc11fd931"
            },
            {
                "key": "con_testing_submission_1.__owner__",
                "value": null
            },
            {
                "key": "con_testing_submission_1.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        4,
                        25,
                        23,
                        1,
                        44,
                        0
                    ]
                }
            },
            {
                "key": "con_testing_submission_1.balances",
                "value": null
            },
            {
                "key": "con_testing_submission_1.metadata",
                "value": null
            },
            {
                "key": "con_testing_submission_2.__code__",
                "value": "__balances = Hash(default_value=0, contract='con_testing_submission_2',\n    name='balances')\n__metadata = Hash(contract='con_testing_submission_2', name='metadata')\n\n\ndef ____():\n    __balances[ctx.caller] = 1000000\n    __metadata['token_name'] = 'Rocketswap Test Token'\n    __metadata['token_symbol'] = 'RSWP'\n    __metadata['operator'] = ctx.caller\n\n\n@__export('con_testing_submission_2')\ndef change_metadata(key: str, value: Any):\n    assert ctx.caller == __metadata['operator'\n        ], 'Only operator can set metadata!'\n    __metadata[key] = value\n\n\n@__export('con_testing_submission_2')\ndef transfer(amount: float, to: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __balances[ctx.caller] >= amount, 'Not enough coins to send!'\n    __balances[ctx.caller] -= amount\n    __balances[to] += amount\n\n\n@__export('con_testing_submission_2')\ndef approve(amount: float, to: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    __balances[ctx.caller, to] += amount\n\n\n@__export('con_testing_submission_2')\ndef transfer_from(amount: float, to: str, main_account: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __balances[main_account, ctx.caller\n        ] >= amount, 'Not enough coins approved to send! You have {} and are trying to spend {}'.format(\n        __balances[main_account, ctx.caller], amount)\n    assert __balances[main_account] >= amount, 'Not enough coins to send!'\n    __balances[main_account, ctx.caller] -= amount\n    __balances[main_account] -= amount\n    __balances[to] += amount\n"
            },
            {
                "key": "con_testing_submission_2.__developer__",
                "value": "e9e8aad29ce8e94fd77d9c55582e5e0c57cf81c552ba61c0d4e34b0dc11fd931"
            },
            {
                "key": "con_testing_submission_2.__owner__",
                "value": null
            },
            {
                "key": "con_testing_submission_2.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        4,
                        30,
                        14,
                        2,
                        17,
                        0
                    ]
                }
            },
            {
                "key": "con_testing_submission_2.balances",
                "value": null
            },
            {
                "key": "con_testing_submission_2.metadata",
                "value": null
            },
            {
                "key": "con_testing_submission_32722789.__code__",
                "value": "__balances = Hash(default_value=0, contract=\n    'con_testing_submission_32722789', name='balances')\n__metadata = Hash(contract='con_testing_submission_32722789', name='metadata')\n\n\ndef ____():\n    __balances[ctx.caller] = 1000000\n    __metadata['token_name'] = 'Rocketswap Test Token'\n    __metadata['token_symbol'] = 'RSWP'\n    __metadata['operator'] = ctx.caller\n\n\n@__export('con_testing_submission_32722789')\ndef change_metadata(key: str, value: Any):\n    assert ctx.caller == __metadata['operator'\n        ], 'Only operator can set metadata!'\n    __metadata[key] = value\n\n\n@__export('con_testing_submission_32722789')\ndef transfer(amount: float, to: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __balances[ctx.caller] >= amount, 'Not enough coins to send!'\n    __balances[ctx.caller] -= amount\n    __balances[to] += amount\n\n\n@__export('con_testing_submission_32722789')\ndef approve(amount: float, to: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    __balances[ctx.caller, to] += amount\n\n\n@__export('con_testing_submission_32722789')\ndef transfer_from(amount: float, to: str, main_account: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __balances[main_account, ctx.caller\n        ] >= amount, 'Not enough coins approved to send! You have {} and are trying to spend {}'.format(\n        __balances[main_account, ctx.caller], amount)\n    assert __balances[main_account] >= amount, 'Not enough coins to send!'\n    __balances[main_account, ctx.caller] -= amount\n    __balances[main_account] -= amount\n    __balances[to] += amount\n"
            },
            {
                "key": "con_testing_submission_32722789.__developer__",
                "value": "e9e8aad29ce8e94fd77d9c55582e5e0c57cf81c552ba61c0d4e34b0dc11fd931"
            },
            {
                "key": "con_testing_submission_32722789.__owner__",
                "value": null
            },
            {
                "key": "con_testing_submission_32722789.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        5,
                        1,
                        11,
                        54,
                        54,
                        0
                    ]
                }
            },
            {
                "key": "con_testing_submission_32722789.balances",
                "value": null
            },
            {
                "key": "con_testing_submission_32722789.metadata",
                "value": null
            },
            {
                "key": "con_whatthehell.__code__",
                "value": "__balances = Hash(default_value=0, contract='con_whatthehell', name='balances')\n__metadata = Hash(contract='con_whatthehell', name='metadata')\n\n\ndef ____():\n    __balances[ctx.caller] = 1000000\n    __metadata['token_name'] = 'TEST TOKEN'\n    __metadata['token_symbol'] = 'TST'\n    __metadata['token_logo_url'] = 'https://some.token.url/test-token.png'\n    __metadata['token_website'] = 'https://some.token.url'\n    __metadata['operator'] = ctx.caller\n\n\n@__export('con_whatthehell')\ndef change_metadata(key: str, value: Any):\n    assert ctx.caller == __metadata['operator'\n        ], 'Only operator can set metadata!'\n    __metadata[key] = value\n\n\n@__export('con_whatthehell')\ndef transfer(amount: float, to: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __balances[ctx.caller] >= amount, 'Not enough coins to send!'\n    __balances[ctx.caller] -= amount\n    __balances[to] += amount\n    return f'Sent {amount} to {to}'\n\n\n@__export('con_whatthehell')\ndef approve(amount: float, to: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    __balances[ctx.caller, to] += amount\n    return f'Approved {amount} for {to}'\n\n\n@__export('con_whatthehell')\ndef transfer_from(amount: float, to: str, main_account: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __balances[main_account, ctx.caller\n        ] >= amount, 'Not enough coins approved to send! You have {} and are trying to spend {}'.format(\n        __balances[main_account, ctx.caller], amount)\n    assert __balances[main_account] >= amount, 'Not enough coins to send!'\n    __balances[main_account, ctx.caller] -= amount\n    __balances[main_account] -= amount\n    __balances[to] += amount\n    return f'Sent {amount} to {to} from {main_account}'\n"
            },
            {
                "key": "con_whatthehell.__developer__",
                "value": "539adbeda299c07ac7dec3c7e99525fb8feecc772173d2905557609fe24dc28b"
            },
            {
                "key": "con_whatthehell.__owner__",
                "value": null
            },
            {
                "key": "con_whatthehell.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        5,
                        7,
                        23,
                        29,
                        28,
                        0
                    ]
                }
            },
            {
                "key": "con_whatthehell.balances",
                "value": null
            },
            {
                "key": "con_whatthehell.metadata",
                "value": null
            },
            {
                "key": "con_x.__code__",
                "value": "def ____():\n    pass\n\n\n@__export('con_x')\ndef test():\n    return 'Hello, World!'\n"
            },
            {
                "key": "con_x.__developer__",
                "value": "f357109d2c0bf9248e39e371544a5fab3fa08e29e2ccee28b39da33972ce3b79"
            },
            {
                "key": "con_x.__owner__",
                "value": null
            },
            {
                "key": "con_x.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        4,
                        24,
                        7,
                        31,
                        16,
                        0
                    ]
                }
            },
            {
                "key": "currency.__code__",
                "value": "__balances = Hash(default_value=0, contract='currency', name='balances')\n\n\ndef ____(vk: str):\n    __balances[vk] = 111111111\n\n\n@__export('currency')\ndef transfer(amount: float, to: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    sender = ctx.caller\n    assert __balances[sender] >= amount, 'Not enough coins to send!'\n    __balances[sender] -= amount\n    __balances[to] += amount\n\n\n@__export('currency')\ndef balance_of(account: str):\n    return __balances[account]\n\n\n@__export('currency')\ndef allowance(owner: str, spender: str):\n    return __balances[owner, spender]\n\n\n@__export('currency')\ndef approve(amount: float, to: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    sender = ctx.caller\n    __balances[sender, to] += amount\n    return __balances[sender, to]\n\n\n@__export('currency')\ndef transfer_from(amount: float, to: str, main_account: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    sender = ctx.caller\n    assert __balances[main_account, sender\n        ] >= amount, 'Not enough coins approved to send! You have {} and are trying to spend {}'.format(\n        __balances[main_account, sender], amount)\n    assert __balances[main_account] >= amount, 'Not enough coins to send!'\n    __balances[main_account, sender] -= amount\n    __balances[main_account] -= amount\n    __balances[to] += amount\n"
            },
            {
                "key": "currency.__developer__",
                "value": "sys"
            },
            {
                "key": "currency.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        4,
                        20,
                        8,
                        45,
                        0,
                        0
                    ]
                }
            },
            {
                "key": "currency.balances",
                "value": null
            },
            {
                "key": "dao.S",
                "value": null
            },
            {
                "key": "dao.__code__",
                "value": "import currency\nimport election_house\n__S = Hash(contract='dao', name='S')\n__pending_motions = Variable(contract='dao', name='pending_motions')\n\n\ndef ____():\n    __S['motion_period'] = datetime.DAYS * 1\n    __S['motion_delay'] = datetime.DAYS * 1\n    __pending_motions.set({'pending_motions': []})\n    __reset()\n\n\n@__export('dao')\ndef current_value():\n    return __pending_motions.get()['pending_motions']\n\n\n@__export('dao')\ndef vote(vk: str, obj: list):\n    __finalize_pending_motions()\n    assert isinstance(obj, list), 'Pass a list!'\n    if len(obj) == 0:\n        return\n    assert vk in election_house.current_value_for_policy('masternodes'\n        ), 'Not a member.'\n    if __S['motion_start'] is None:\n        recipient_vk, amount = obj\n        __assert_recipient_vk_and_amount_is_valid(recipient_vk, amount)\n        __S['recipient_vk'] = recipient_vk\n        __S['amount'] = amount\n        __S['motion_start'] = now\n    else:\n        if now - __S['motion_start'] >= __S['motion_period']:\n            __reset()\n            return\n        position, = obj\n        __assert_vote_is_valid(vk, position)\n        __S['positions', vk] = position\n        if position:\n            __S['yays'] += 1\n        else:\n            __S['nays'] += 1\n        total_votes = __S['yays'] + __S['nays']\n        if total_votes >= len(election_house.current_value_for_policy(\n            'masternodes')) * 3 // 5 + 1:\n            if __S['yays'] >= total_votes * 7 // 10 + 1:\n                __pass_motion()\n            elif __S['nays'] >= total_votes * 7 // 10 + 1:\n                __reset()\n\n\ndef __pass_motion():\n    motions = __pending_motions.get()['pending_motions']\n    motions += [{'motion_passed': now, 'recipient_vk': __S['recipient_vk'],\n        'amount': __S['amount']}]\n    __pending_motions.set({'pending_motions': motions})\n    __reset()\n\n\ndef __finalize_pending_motions():\n    motions = __pending_motions.get()['pending_motions']\n    for motion in motions[:]:\n        if now - motion['motion_passed'] >= __S['motion_delay']:\n            currency.transfer(amount=motion['amount'], to=motion[\n                'recipient_vk'])\n            motions.remove(motion)\n    __pending_motions.set({'pending_motions': motions})\n\n\ndef __reset():\n    __S['yays'] = 0\n    __S['nays'] = 0\n    __S['motion_start'] = None\n    __S['recipient_vk'] = None\n    __S['amount'] = None\n    __S.clear('positions')\n\n\ndef __assert_recipient_vk_and_amount_is_valid(vk: str, amount: int):\n    assert vk is not None, 'No recipient VK provided.'\n    assert isinstance(vk, str), 'Recipient VK is not a string.'\n    assert len(vk) == 64, 'Recipient VK is not 64 characters.'\n    int(vk, 16)\n    assert amount is not None, 'No amount provided.'\n    assert isinstance(amount, int), 'Amount is not an integer.'\n    assert amount > 0, 'Amount is not greater than zero.'\n\n\ndef __assert_vote_is_valid(vk: str, position: bool):\n    assert __S['positions', vk] is None, 'VK already voted.'\n    assert isinstance(position, bool), 'Invalid position.'\n"
            },
            {
                "key": "dao.__developer__",
                "value": "sys"
            },
            {
                "key": "dao.__owner__",
                "value": "election_house"
            },
            {
                "key": "dao.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        4,
                        20,
                        8,
                        45,
                        0,
                        0
                    ]
                }
            },
            {
                "key": "dao.pending_motions",
                "value": {
                    "pending_motions": []
                }
            },
            {
                "key": "elect_masternodes.__code__",
                "value": "import currency\nimport election_house\n__candidate_state = Hash(contract='elect_masternodes', name='candidate_state')\n__top_candidate = Variable(contract='elect_masternodes', name='top_candidate')\n__no_confidence_state = Hash(contract='elect_masternodes', name=\n    'no_confidence_state')\n__last_candidate = Variable(contract='elect_masternodes', name='last_candidate'\n    )\n__to_be_relinquished = Variable(contract='elect_masternodes', name=\n    'to_be_relinquished')\nSTAMP_COST = 20\n__member_cost = Variable(contract='elect_masternodes', name='member_cost')\n__controller = Variable(contract='elect_masternodes', name='controller')\n\n\ndef ____(policy: str='members', cost: int=500000):\n    __controller.set(policy)\n    __member_cost.set(cost)\n\n\n@__export('elect_masternodes')\ndef register():\n    assert not __candidate_state['registered', ctx.caller\n        ], 'Already registered.'\n    currency.transfer_from(__member_cost.get(), ctx.this, ctx.caller)\n    __candidate_state['registered', ctx.caller] = True\n    __candidate_state['votes', ctx.caller] = 0\n    if __top_candidate.get() is None:\n        __top_candidate.set(ctx.caller)\n\n\n@__export('elect_masternodes')\ndef unregister():\n    mns = election_house.current_value_for_policy(__controller.get())\n    assert __candidate_state['registered', ctx.caller], 'Not registered.'\n    assert ctx.caller not in mns, \"Can't unstake if in governance.\"\n    currency.transfer(__member_cost.get(), ctx.caller)\n    __candidate_state['registered', ctx.caller] = False\n    __candidate_state['votes', ctx.caller] = 0\n\n\n@__export('elect_masternodes')\ndef vote_candidate(address: str):\n    assert __candidate_state['registered', address\n        ], 'Candidate not registered.'\n    v = __candidate_state['last_voted', ctx.caller]\n    assert v is None or now - v > datetime.DAYS * 1, 'Voting again too soon.'\n    vote_cost = STAMP_COST / election_house.current_value_for_policy(\n        'stamp_cost')\n    currency.transfer_from(vote_cost, 'blackhole', ctx.caller)\n    __candidate_state['last_voted', ctx.caller] = now\n    votes = __candidate_state['votes', address]\n    if votes is None:\n        __candidate_state['votes', address] = 1\n    else:\n        __candidate_state['votes', address] += 1\n    if __top_candidate.get() is not None:\n        if __candidate_state['votes', address] > __candidate_state['votes',\n            __top_candidate.get()]:\n            __top_candidate.set(address)\n\n\n@__export('elect_masternodes')\ndef top_member():\n    return __top_candidate.get()\n\n\n@__export('elect_masternodes')\ndef pop_top():\n    assert ctx.caller == __controller.get(), 'Wrong smart contract caller.'\n    top = top_member()\n    if top is None:\n        return None\n    __candidate_state.clear('votes')\n    __top_candidate.set(None)\n\n\n@__export('elect_masternodes')\ndef vote_no_confidence(address: str):\n    assert address in election_house.current_value_for_policy(__controller.\n        get()), 'Cannot vote against a non-committee member'\n    v = __no_confidence_state['last_voted', ctx.caller]\n    assert v is None or now - v > datetime.DAYS * 1, 'Voting again too soon.'\n    vote_cost = STAMP_COST / election_house.current_value_for_policy(\n        'stamp_cost')\n    currency.transfer_from(vote_cost, 'blackhole', ctx.caller)\n    __no_confidence_state['last_voted', ctx.caller] = now\n    if __no_confidence_state['votes', address] is None:\n        __no_confidence_state['votes', address] = 1\n    else:\n        __no_confidence_state['votes', address] += 1\n    if __last_candidate.get() is None:\n        __last_candidate.set(address)\n    elif __no_confidence_state['votes', address] > __no_confidence_state[\n        'votes', __last_candidate.get()]:\n        __last_candidate.set(address)\n\n\n@__export('elect_masternodes')\ndef last_member():\n    r = __to_be_relinquished.get()\n    if r is not None:\n        return r\n    return __last_candidate.get()\n\n\n@__export('elect_masternodes')\ndef pop_last():\n    assert ctx.caller == __controller.get(), 'Wrong smart contract caller.'\n    r = __to_be_relinquished.get()\n    if r is not None:\n        __no_confidence_state['votes', r] = 0\n        __to_be_relinquished.set(None)\n    else:\n        __no_confidence_state.clear('votes')\n        __candidate_state['registered', __last_candidate.get()] = False\n        __last_candidate.set(None)\n\n\n@__export('elect_masternodes')\ndef force_removal(address: str):\n    assert ctx.caller == __controller.get(), 'Wrong smart contract caller.'\n    __candidate_state['registered', address] = False\n\n\n@__export('elect_masternodes')\ndef relinquish():\n    assert ctx.caller in election_house.current_value_for_policy(__controller\n        .get())\n    r = __to_be_relinquished.get()\n    assert r is None, 'Someone is already trying to relinquish!'\n    __to_be_relinquished.set(ctx.caller)\n"
            },
            {
                "key": "elect_masternodes.__developer__",
                "value": "sys"
            },
            {
                "key": "elect_masternodes.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        4,
                        20,
                        8,
                        45,
                        0,
                        0
                    ]
                }
            },
            {
                "key": "elect_masternodes.controller",
                "value": "masternodes"
            },
            {
                "key": "elect_masternodes.member_cost",
                "value": 100000
            },
            {
                "key": "election_house.__code__",
                "value": "I = importlib\n__policies = Hash(contract='election_house', name='policies')\npolicy_interface = [I.Func('vote', args=('vk', 'obj')), I.Func('current_value')\n    ]\n\n\n@__export('election_house')\ndef register_policy(contract: str):\n    if __policies[contract] is None:\n        p = I.import_module(contract)\n        assert I.owner_of(p\n            ) == ctx.this, 'Election house must control the policy contract!'\n        assert I.enforce_interface(p, policy_interface\n            ), 'Policy contract does not follow the correct interface'\n        __policies[contract] = True\n    else:\n        raise Exception('Policy already registered')\n\n\n@__export('election_house')\ndef current_value_for_policy(policy: str):\n    assert __policies[policy] is not None, f'Invalid policy: {policy}.'\n    p = I.import_module(policy)\n    return p.current_value()\n\n\n@__export('election_house')\ndef vote(policy: str, value: Any):\n    assert __policies[policy] is not None, 'Invalid policy.'\n    p = I.import_module(policy)\n    p.vote(vk=ctx.caller, obj=value)\n"
            },
            {
                "key": "election_house.__developer__",
                "value": "sys"
            },
            {
                "key": "election_house.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        4,
                        20,
                        8,
                        45,
                        0,
                        0
                    ]
                }
            },
            {
                "key": "election_house.policies",
                "value": null
            },
            {
                "key": "foundation.__code__",
                "value": "import currency\n__owner = Variable(contract='foundation', name='owner')\n\n\ndef ____(vk: str):\n    __owner.set(vk)\n\n\n@__export('foundation')\ndef withdraw(amount: float):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert ctx.caller == __owner.get(), 'Not owner!'\n    currency.transfer(amount, ctx.caller)\n\n\n@__export('foundation')\ndef change_owner(vk: str):\n    assert ctx.caller == __owner.get(), 'Not owner!'\n    __owner.set(vk)\n"
            },
            {
                "key": "foundation.__developer__",
                "value": "sys"
            },
            {
                "key": "foundation.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        4,
                        20,
                        8,
                        45,
                        0,
                        0
                    ]
                }
            },
            {
                "key": "foundation.owner",
                "value": "ee06a34cf08bf72ce592d26d36b90c79daba2829ba9634992d034318160d49f9"
            },
            {
                "key": "masternodes.S",
                "value": null
            },
            {
                "key": "masternodes.__code__",
                "value": "INTRODUCE_MOTION = 'introduce_motion'\nVOTE_ON_MOTION = 'vote_on_motion'\nNO_MOTION = 0\nREMOVE_MEMBER = 1\nADD_SEAT = 2\nREMOVE_SEAT = 3\nVOTING_PERIOD = datetime.DAYS * 1\n__S = Hash(contract='masternodes', name='S')\n__minimum_nodes = Variable(contract='masternodes', name='minimum_nodes')\n__candidate_contract = Variable(contract='masternodes', name=\n    'candidate_contract')\n\n\ndef ____(initial_members: list, minimum: int=1, candidate: str='elect_members'\n    ):\n    __S['members'] = initial_members\n    __minimum_nodes.set(minimum)\n    __candidate_contract.set(candidate)\n    __S['yays'] = 0\n    __S['nays'] = 0\n    __S['current_motion'] = NO_MOTION\n    __S['motion_opened'] = now\n\n\n@__export('masternodes')\ndef quorum_max():\n    return int(len(__S['members']) * 2 / 3) + 1\n\n\n@__export('masternodes')\ndef quorum_min():\n    return min(quorum_max(), __minimum_nodes.get())\n\n\n@__export('masternodes')\ndef current_value():\n    return __S['members']\n\n\n@__export('masternodes')\ndef vote(vk: str, obj: list):\n    assert isinstance(obj, list), 'Pass a list!'\n    arg = None\n    if len(obj) == 3:\n        action, position, arg = obj\n    else:\n        action, position = obj\n    __assert_vote_is_valid(vk, action, position, arg)\n    if action == INTRODUCE_MOTION:\n        __introduce_motion(position, arg)\n    else:\n        assert __S['current_motion'] != NO_MOTION, 'No motion proposed.'\n        if now - __S['motion_opened'] >= VOTING_PERIOD:\n            __reset()\n        assert __S['positions', vk] is None, 'VK already voted.'\n        if position is True:\n            __S['yays'] += 1\n            __S['positions', vk] = position\n        else:\n            __S['nays'] += 1\n            __S['positions', vk] = position\n        if __S['yays'] >= len(__S['members']) // 2 + 1:\n            __pass_current_motion()\n            __reset()\n        elif __S['nays'] >= len(__S['members']) // 2 + 1:\n            __reset()\n\n\ndef __assert_vote_is_valid(vk: str, action: str, position: bool, arg: Any=None\n    ):\n    assert vk in __S['members'], 'Not a member.'\n    assert action in [INTRODUCE_MOTION, VOTE_ON_MOTION], 'Invalid action.'\n    if action == INTRODUCE_MOTION:\n        assert __S['current_motion'] == NO_MOTION, 'Already in motion.'\n        assert 0 < position <= REMOVE_SEAT, 'Invalid motion.'\n        if position == REMOVE_MEMBER:\n            __assert_vk_is_valid(arg)\n    elif action == VOTE_ON_MOTION:\n        assert isinstance(position, bool), 'Invalid position'\n\n\ndef __assert_vk_is_valid(vk: str):\n    assert vk is not None, 'No VK provided.'\n    assert isinstance(vk, str), 'VK not a string.'\n    assert len(vk) == 64, 'VK is not 64 characters.'\n    int(vk, 16)\n\n\ndef __introduce_motion(position: int, arg: Any):\n    assert position <= REMOVE_SEAT, 'Invalid position.'\n    if position == REMOVE_MEMBER:\n        assert arg in __S['members'], 'Member does not exist.'\n        assert len(__S['members']) > __minimum_nodes.get(\n            ), 'Cannot drop below current quorum.'\n        __S['member_in_question'] = arg\n    __S['current_motion'] = position\n    __S['motion_opened'] = now\n\n\ndef __pass_current_motion():\n    current_motion = __S['current_motion']\n    members = __S['members']\n    if current_motion == REMOVE_MEMBER:\n        members.remove(__S['member_in_question'])\n    elif current_motion == ADD_SEAT:\n        member_candidates = importlib.import_module(__candidate_contract.get())\n        new_mem = member_candidates.top_member()\n        if new_mem is not None:\n            members.append(new_mem)\n            member_candidates.pop_top()\n    elif current_motion == REMOVE_SEAT:\n        member_candidates = importlib.import_module(__candidate_contract.get())\n        old_mem = member_candidates.last_member()\n        if old_mem is not None:\n            members.remove(old_mem)\n            member_candidates.pop_last()\n    __S['members'] = members\n\n\ndef __reset():\n    __S['current_motion'] = NO_MOTION\n    __S['member_in_question'] = None\n    __S['yays'] = 0\n    __S['nays'] = 0\n    __S.clear('positions')\n"
            },
            {
                "key": "masternodes.__developer__",
                "value": "sys"
            },
            {
                "key": "masternodes.__owner__",
                "value": "election_house"
            },
            {
                "key": "masternodes.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        4,
                        20,
                        8,
                        45,
                        0,
                        0
                    ]
                }
            },
            {
                "key": "masternodes.candidate_contract",
                "value": "elect_masternodes"
            },
            {
                "key": "masternodes.minimum_nodes",
                "value": 1
            },
            {
                "key": "rewards.S",
                "value": null
            },
            {
                "key": "rewards.__code__",
                "value": "import election_house\n__S = Hash(contract='rewards', name='S')\n\n\ndef ____(initial_split: list=[decimal('0.88'), decimal('0.01'), decimal(\n    '0.01'), decimal('0.1')], master_contract='masternodes',\n    election_max_length=datetime.DAYS * 1):\n    __S['value'] = initial_split\n    __S['master_contract'] = master_contract\n    __S['election_max_length'] = election_max_length\n    __S['vote_count'] = 0\n    __reset_current_votes()\n\n\ndef __reset_current_votes():\n    __S['current_votes', 'masternodes'] = 0\n    __S['current_votes', 'blackhole'] = 0\n    __S['current_votes', 'foundation'] = 0\n    __S['current_votes', 'developer'] = 0\n\n\n@__export('rewards')\ndef current_value():\n    return __S['value']\n\n\n@__export('rewards')\ndef vote(vk: str, obj: list):\n    if __S['election_start'] is None:\n        total_nodes = len(election_house.current_value_for_policy(__S[\n            'master_contract']))\n        __S['vote_count'] = 0\n        __S['min_votes_required'] = total_nodes * 2 // 3 + 1\n        __S['election_start'] = now\n        __S.clear('has_voted')\n        __reset_current_votes()\n        __tally_vote(vk, obj)\n    else:\n        __tally_vote(vk, obj)\n        if __election_is_over():\n            __update_value()\n            __S['election_start'] = None\n\n\ndef __update_value():\n    masternode_votes = __S['current_votes', 'masternodes'] or 1\n    blackhole_votes = __S['current_votes', 'blackhole'] or 1\n    foundation_votes = __S['current_votes', 'foundation'] or 1\n    developer_votes = __S['current_votes', 'developer'] or 1\n    total_votes = (masternode_votes + blackhole_votes + foundation_votes +\n        developer_votes)\n    mn = masternode_votes / total_votes\n    bh = blackhole_votes / total_votes\n    fd = foundation_votes / total_votes\n    dv = developer_votes / total_votes\n    __S['value'] = [mn, bh, fd, dv]\n\n\ndef __election_is_over():\n    return __S['vote_count'] >= __S['min_votes_required'] or now - __S[\n        'election_start'] >= __S['election_max_length']\n\n\ndef __tally_vote(vk: str, obj: list):\n    __validate_vote(vk, obj)\n    a, b, c, d = obj\n    __S['current_votes', 'masternodes'] += a\n    __S['current_votes', 'blackhole'] += b\n    __S['current_votes', 'foundation'] += c\n    __S['current_votes', 'developer'] += d\n    __S['has_voted', vk] = True\n    __S['vote_count'] += 1\n\n\ndef __validate_vote(vk: str, obj: list):\n    assert vk in election_house.current_value_for_policy(__S['master_contract']\n        ), 'Not allowed to vote!'\n    assert isinstance(obj, list), 'Pass a list!'\n    assert len(obj) == 4, 'Must have 4 elements!'\n    s = 0\n    for o in obj:\n        assert int(o) >= 0, 'No non-negative numbers!'\n        s += o\n    assert s == 100, 'Elements must add to 100!'\n    assert __S['has_voted', vk] is None, 'VK has already voted!'\n"
            },
            {
                "key": "rewards.__developer__",
                "value": "sys"
            },
            {
                "key": "rewards.__owner__",
                "value": "election_house"
            },
            {
                "key": "rewards.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        4,
                        20,
                        8,
                        45,
                        0,
                        0
                    ]
                }
            },
            {
                "key": "stamp_cost.S",
                "value": null
            },
            {
                "key": "stamp_cost.__code__",
                "value": "import election_house\n__S = Hash(contract='stamp_cost', name='S')\n\n\ndef ____(initial_rate: int=100, master_contract='masternodes',\n    election_max_length=datetime.DAYS * 1):\n    __S['value'] = initial_rate\n    __S['master_contract'] = master_contract\n    __S['election_max_length'] = election_max_length\n    __S['vote_count'] = 1\n    __reset_current_votes()\n\n\ndef __reset_current_votes():\n    __S['current_total'] = __S['value']\n\n\n@__export('stamp_cost')\ndef current_value():\n    return __S['value']\n\n\n@__export('stamp_cost')\ndef vote(vk: str, obj: int):\n    if __S['election_start'] is None:\n        total_nodes = len(election_house.current_value_for_policy(__S[\n            'master_contract']))\n        __S['vote_count'] = 1\n        __S['min_votes_required'] = total_nodes * 2 // 3 + 1\n        __S['election_start'] = now\n        __S.clear('has_voted')\n        __reset_current_votes()\n        __tally_vote(vk, obj)\n    else:\n        __tally_vote(vk, obj)\n        if __election_is_over():\n            __update_value()\n            __S['election_start'] = None\n\n\ndef __update_value():\n    __S['value'] = int(__S['current_total'] / __S['vote_count']) or 1\n\n\ndef __election_is_over():\n    return __S['vote_count'] >= __S['min_votes_required'] or now - __S[\n        'election_start'] >= __S['election_max_length']\n\n\ndef __tally_vote(vk: str, obj: int):\n    __validate_vote(vk, obj)\n    __S['current_total'] += obj\n    __S['has_voted', vk] = True\n    __S['vote_count'] += 1\n\n\ndef __validate_vote(vk: str, obj: int):\n    assert vk in election_house.current_value_for_policy(__S['master_contract']\n        ), 'Not allowed to vote!'\n    assert isinstance(obj, int), 'Pass an int!'\n    assert obj > 0, 'No negatives!'\n    assert __S['value'] / 2 <= obj <= __S['value'] * 2, 'Out of range!'\n    assert __S['has_voted', vk] is None, 'Already voted!'\n"
            },
            {
                "key": "stamp_cost.__developer__",
                "value": "sys"
            },
            {
                "key": "stamp_cost.__owner__",
                "value": "election_house"
            },
            {
                "key": "stamp_cost.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        4,
                        20,
                        8,
                        45,
                        0,
                        0
                    ]
                }
            },
            {
                "key": "submission.__code__",
                "value": "@__export('submission')\ndef submit_contract(name: str, code: str, owner: Any=None, constructor_args: dict={}):\n    if ctx.caller != 'sys':\n        assert name.startswith('con_'), 'Contract must start with con_!'\n\n    assert ctx.caller == ctx.signer, 'Contract cannot be called from another contract!'\n    assert len(name) <= 64, 'Contract name length exceeds 64 characters!'\n    assert name.islower(), 'Contract name must be lowercase!'\n\n    __Contract().submit(\n        name=name,\n        code=code,\n        owner=owner,\n        constructor_args=constructor_args,\n        developer=ctx.caller\n    )\n\n\n@__export('submission')\ndef change_developer(contract: str, new_developer: str):\n    d = __Contract()._driver.get_var(contract=contract, variable='__developer__')\n    assert ctx.caller == d, 'Sender is not current developer!'\n\n    __Contract()._driver.set_var(\n        contract=contract,\n        variable='__developer__',\n        value=new_developer\n    )\n"
            },
            {
                "key": "submission.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        4,
                        20,
                        18,
                        46,
                        55,
                        50811
                    ]
                }
            }
        ],
        "nonces": [
            {
                "key": "292b346779dca86b8ffb979f48b590ea04c2d49d9fb505af9d6aa7e044a45269",
                "value": 0
            },
            {
                "key": "3949f668838b7d2dae11ad1ff62fcd4b0aaa1b9ab161ad9eda7ce787b7314790",
                "value": 2
            },
            {
                "key": "539adbeda299c07ac7dec3c7e99525fb8feecc772173d2905557609fe24dc28b",
                "value": 0
            },
            {
                "key": "6b596c4590a64651145a45a1e512eb6f1255124c06cae1e33586d3434b67e761",
                "value": 0
            },
            {
                "key": "7fa496ca2438e487cc45a8a27fd95b2efe373223f7b72868fbab205d686be48e",
                "value": 0
            },
            {
                "key": "80e1ac9fe93b88fc201bc3029a920bc27c752afd6ff0d71a0125ac485ab090f8",
                "value": 11
            },
            {
                "key": "b6504cf056e264a4c1932d5de6893d110db5459ab4f742eb415d98ed989bb98d",
                "value": 0
            },
            {
                "key": "b6d01fbbd741b9324a5808bd567e1656ded90969ce5095ad5019005a36932020",
                "value": 0
            },
            {
                "key": "ca4a88412dbfd6c32a39ade24b4be71c78d6c1388ce536a13c73f4aa6c8570cf",
                "value": 1
            },
            {
                "key": "e9e8aad29ce8e94fd77d9c55582e5e0c57cf81c552ba61c0d4e34b0dc11fd931",
                "value": 5
            },
            {
                "key": "ee06a34cf08bf72ce592d26d36b90c79daba2829ba9634992d034318160d49f9",
                "value": 3
            }
        ]
    }
}